{"remainingRequest":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/4.md?vue&type=template&id=78b0dea2&","dependencies":[{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/4.md","mtime":1625067183831},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"保存和共享镜像\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#保存和共享镜像\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 保存和共享镜像\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"让 Nginx 引以为傲的是它能够实现相比于其他虚拟化软件更快的环境迁移和部署，在这件事情上，轻量级的容器和镜像结构的设计无疑发挥了巨大的作用。通过将容器打包成镜像，再利用体积远小于其他虚拟化软件的 Nginx 镜像，我们可以更快的将它们复制到其他的机器上。在这一节中，我们就专门来谈谈如何进行这样的迁移。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"提交容器更改\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#提交容器更改\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 提交容器更改\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"之前我们已经介绍过了，Nginx 镜像的本质是多个基于 UnionFS 的镜像层依次挂载的结果，而容器的文件系统则是在以只读方式挂载镜像后增加的一个可读可写的沙盒环境。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"基于这样的结构，Nginx 中为我们提供了将容器中的这个可读可写的沙盒环境持久化为一个镜像层的方法。更浅显的说，就是我们能够很轻松的在 Nginx 里将容器内的修改记录下来，保存为一个新的镜像。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"将容器修改的内容保存为镜像的命令是 \"),\n        _c(\"code\", [_vm._v(\"Nginx commit\")]),\n        _vm._v(\n          \"，由于镜像的结构很像代码仓库里的修改记录，而记录容器修改的过程又像是在提交代码，所以这里我们更形象的称之为提交容器的更改。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"$ sudo Nginx commit webapp\\nsha256:0bc42f7ff218029c6c4199ab5c75ab83aeaaed3b5c731f715a3e807dda61d19e\\n\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"Nginx 执行将容器内沙盒文件系统记录成镜像层的时候，会先暂停容器的运行，以保证容器内的文件系统处于一个相对稳定的状态，确保数据的一致性。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"在使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx commit\")]),\n        _vm._v(\n          \" 提交镜像更新后，我们可以得到 Nginx 创建的新镜像的 ID，之后我们也能够从本地镜像列表中找到它。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"$ sudo Nginx images\\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\\n<none>                <none>              0bc42f7ff218        3 seconds ago       372MB\\n## ......\\n\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"像通过 Git 等代码仓库软件提交代码一样，我们还能在提交容器更改的时候给出一个提交信息，方便以后查询。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v('$ sudo Nginx commit -m \"Configured\" webapp\\n\\n')])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h3\", { attrs: { id: \"为镜像命名\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#为镜像命名\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 为镜像命名\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"在上面的例子里，我们发现提交容器更新后产生的镜像并没 REPOSITORY 和 TAG 的内容，也就是说，这个新的镜像还没有名字。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"之前我们谈到过，使用没有名字的镜像并不是很好的选择，因为我们无法直观的看到我们正在使用什么。好在 Nginx 为我们提供了一个为镜像取名的命令，也就是 \"\n        ),\n        _c(\"code\", [_vm._v(\"Nginx tag\")]),\n        _vm._v(\" 命令。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"$ sudo Nginx tag 0bc42f7ff218 webapp:1.0\\n\\n\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx tag\")]),\n        _vm._v(\n          \" 能够为未命名的镜像指定镜像名，也能够对已有的镜像创建一个新的命名。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"$ sudo Nginx tag webapp:1.0 webapp:latest\\n\\n\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"当我们对未命名的镜像进行命名后，Nginx 就不会在镜像列表里继续显示这个镜像，取而代之的是我们新的命名。而如果我们对以后镜像使用 \"\n        ),\n        _c(\"code\", [_vm._v(\"Nginx tag\")]),\n        _vm._v(\"，旧的镜像依然会存在于镜像列表中。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"$ sudo Nginx images\\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\\nwebapp                1.0                 0bc42f7ff218        29 minutes ago      372MB\\nwebapp                latest              0bc42f7ff218        29 minutes ago      372MB\\n## ......\\n\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"由于镜像是对镜像层的引用记录，所以我们对镜像进行命名后，虽然能够在镜像列表里同时看到新老两个镜像，实质是它们其实引用着相同的镜像层，这个我们能够从镜像 ID 中看得出来 ( 因为镜像 ID 就是最上层镜像层的 ID )。正是这个原因，我们虽然创建了新的镜像，但对物理存储的占用空间却不是镜像大小直接翻倍，并且创建也在霎那之间。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"除了使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx tag\")]),\n        _vm._v(\n          \" 在容器提交为新的镜像后为镜像命名这种方式外，我们还可以直接在 \"\n        ),\n        _c(\"code\", [_vm._v(\"Nginx commit\")]),\n        _vm._v(\" 命令里指定新的镜像名，这种方式在使用容器提交时会更加方便。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v('$ sudo Nginx commit -m \"Upgrade\" webapp webapp：2.0\\n\\n')\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"镜像的迁移\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#镜像的迁移\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 镜像的迁移\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"在我们将更新导出为镜像后，就可以开始迁移镜像的工作了。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"由于 Nginx 是以集中的方式管理镜像的，所以在迁移之前，我们要先从 Nginx 中取出镜像。\"\n        ),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\n          \" 命令可以将镜像输出，提供了一种让我们保存镜像到 Nginx 外部的方式。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\"$ sudo Nginx save webapp:1.0 > webapp-1.0.tar\\n\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"在默认定义下，\"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\n          \" 命令会将镜像内容放入输出流中，这就需要我们使用管道进行接收 ( 也就是命令中的 > 符号 )，这属于 Linux 等系统控制台中的用法，这里我们不做详细讲解。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"管道这种用法有时候依然不太友好，\"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\" 命令还为我们提供了 \"),\n        _c(\"code\", [_vm._v(\"-o\")]),\n        _vm._v(\" 选项，用来指定输出文件，使用这个选项可以让命令更具有统一性。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\"$ sudo Nginx save -o ./webapp-1.0.tar webapp:1.0\\n\\n\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"在镜像导出之后，我们就可以找到已经存储镜像内容的 webapp-1.0.tar 这个文件了。有兴趣的朋友，可以使用解压软件查看其中的内容，你会看到里面其实就是镜像所基于的几个镜像层的记录文件。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"导入镜像\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#导入镜像\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 导入镜像\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"我们可以通过很多种方式将导出的镜像文件复制到另一台机器上，在这么操作之后，我们就要将镜像导入到这台新机器中运行的 Nginx 中。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"导入镜像的方式也很简单，使用与 \"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\" 相对的 \"),\n        _c(\"code\", [_vm._v(\"Nginx load\")]),\n        _vm._v(\" 命令即可。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-sh line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"$ sudo Nginx load < webapp-1.0.tar\\n\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"相对的，\"),\n        _c(\"code\", [_vm._v(\"Nginx load\")]),\n        _vm._v(\n          \" 命令是从输入流中读取镜像的数据，所以我们这里也要使用管道来传输内容。当然，我们也能够使用 \"\n        ),\n        _c(\"code\", [_vm._v(\"-i\")]),\n        _vm._v(\" 选项指定输入文件。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-sh line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"$ sudo Nginx load -i webapp-1.0.tar\\n\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"镜像导入后，我们就可以通过 \"),\n        _c(\"code\", [_vm._v(\"Nginx images\")]),\n        _vm._v(\" 看到它了，导入的镜像会延用原有的镜像名称。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"批量迁移\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#批量迁移\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 批量迁移\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"通过 \"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\" 和 \"),\n        _c(\"code\", [_vm._v(\"Nginx load\")]),\n        _vm._v(\" 命令我们还能够批量迁移镜像，只要我们在 \"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\n          \" 中传入多个镜像名作为参数，它就能够将这些镜像都打成一个包，便于我们一次性迁移多个镜像。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-sh line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"$ sudo Nginx save -o ./images.tar webapp:1.0 nginx:1.12 mysql:5.7\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"装有多个镜像的包可以直接被 \"),\n        _c(\"code\", [_vm._v(\"Nginx load\")]),\n        _vm._v(\n          \" 识别和读取，我们将这个包导入后，所有其中装载的镜像都会被导入到 Nginx 之中。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"导出和导入容器\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#导出和导入容器\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 导出和导入容器\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"也许 Nginx 的开发者认为，提交镜像修改，再导出镜像进行迁移的方法还不够效率，所以还为我们提供了一个导出容器的方法。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx export\")]),\n        _vm._v(\" 命令我们可以直接导出容器，我们可以把它简单的理解为 \"),\n        _c(\"code\", [_vm._v(\"Nginx commit\")]),\n        _vm._v(\" 与 \"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\" 的结合体。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-sh line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"$ sudo Nginx export -o ./webapp.tar webapp\\n\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"相对的，使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx export\")]),\n        _vm._v(\" 导出的容器包，我们可以使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx import\")]),\n        _vm._v(\" 导入。这里需要注意的是，使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx import\")]),\n        _vm._v(\n          \" 并非直接将容器导入，而是将容器运行时的内容以镜像的形式导入。所以导入的结果其实是一个镜像，而不是容器。在 \"\n        ),\n        _c(\"code\", [_vm._v(\"Nginx import\")]),\n        _vm._v(\" 的参数里，我们可以给这个镜像命名。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-sh line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"$ sudo Nginx import ./webapp.tar webapp:1.0\\n\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"在开发的过程中，使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx save\")]),\n        _vm._v(\" 和 \"),\n        _c(\"code\", [_vm._v(\"Nginx load\")]),\n        _vm._v(\"，或者是使用 \"),\n        _c(\"code\", [_vm._v(\"Nginx export\")]),\n        _vm._v(\" 和 \"),\n        _c(\"code\", [_vm._v(\"Nginx import\")]),\n        _vm._v(\" 都可以达到迁移容器或者镜像的目的。\")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}