{"remainingRequest":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/2.md?vue&type=template&id=78b2b01e&","dependencies":[{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/2.md","mtime":1625067183830},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"在-windows-和-mac-中使用-nginx\"><a class=\"header-anchor\" href=\"#在-windows-和-mac-中使用-nginx\">#</a> 在 Windows 和 Mac 中使用 Nginx</h1>\n<p>对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Nginx 的方法。很幸运的是，Nginx 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Nginx。在这一小节中，我们就来了解一下 Nginx 在 Windows 和 macOS 中安装的方式以及运行的原理。</p>\n<h2 id=\"nginx-desktop\"><a class=\"header-anchor\" href=\"#nginx-desktop\">#</a> Nginx Desktop</h2>\n<p>在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Nginx 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。</p>\n<p>如同封装 Nginx 为我们提供了轻松的虚拟化运行环境一样，Nginx 在 Windows 和 macOS 中的安装也是极易完成的。Nginx 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Nginx Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Nginx 环境的工具。</p>\n<p>Nginx Desktop 实现容器化与 Nginx Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Nginx 实例中，不论这个 Nginx 实例是运行在 Windows、macOS 亦或是 Linux。</p>\n<p>Nginx Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Nginx for Windows 和针对 macOS 的 Nginx for Mac。</p>\n<h3 id=\"安装-nginx-desktop\"><a class=\"header-anchor\" href=\"#安装-nginx-desktop\">#</a> 安装 Nginx Desktop</h3>\n<p>在安装 Nginx for Windows 和 Nginx for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Nginx for Windows 和 Nginx for Mac。</p>\n<p>对于 Windows 系统来说，安装 Nginx for Windows 需要符合以下条件：</p>\n<ul>\n<li>必须使用 Windows 10 Pro ( 专业版 )</li>\n<li>必须使用 64 bit 版本的 Windows</li>\n</ul>\n<p>对于 macOS 系统来说，安装 Nginx for Mac 需要符合以下条件：</p>\n<ul>\n<li>Mac 硬件必须为 2010 年以后的型号</li>\n<li>必须使用 macOS El Capitan 10.11 及以后的版本</li>\n</ul>\n<p>另外，虚拟机软件 VirtualBox 与 Nginx Desktop 兼容性不佳，建议在安装 Nginx for Windows 和 Nginx for Mac 之前先卸载 VirtualBox。</p>\n<p>在确认系统能够支持 Nginx Desktop 之后，我们就从 Nginx 官方网站下载这两个软件的安装程序，这里直接附上 Nginx Store 的下载链接，供大家直接下载：</p>\n<ul>\n<li><a href=\"https://store.Nginx.com/editions/community/Nginx-ce-desktop-windows\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx for Windows<OutboundLink/></a> ( <a href=\"https://store.Nginx.com/editions/community/Nginx-ce-desktop-windows\" target=\"_blank\" rel=\"noopener noreferrer\">https://store.Nginx.com/editions/community/Nginx-ce-desktop-windows<OutboundLink/></a> )</li>\n<li><a href=\"https://store.Nginx.com/editions/community/Nginx-ce-desktop-mac\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx for Mac<OutboundLink/></a> ( <a href=\"https://store.Nginx.com/editions/community/Nginx-ce-desktop-mac\" target=\"_blank\" rel=\"noopener noreferrer\">https://store.Nginx.com/editions/community/Nginx-ce-desktop-mac<OutboundLink/></a> )</li>\n</ul>\n<p>安装 Nginx for Windows 和 Nginx for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。</p>\n<h3 id=\"启动-nginx\"><a class=\"header-anchor\" href=\"#启动-nginx\">#</a> 启动 Nginx</h3>\n<p>像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Nginx 前，我们需要先将 Nginx 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Nginx for Windows 和 Nginx for Mac 了。</p>\n<p>启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Nginx for Windows 或 Nginx for Mac 并启动即可。</p>\n<p>打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Nginx 的大鲸鱼图标。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/10/165c1d1fb7030b63?w=1186&amp;h=431&amp;f=png&amp;s=92607\" alt=\"\"></p>\n<p>Nginx for Windows 或 Nginx for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Nginx 程序正在部署 Nginx daemon 所需要的一些环境并执行 Nginx daemon 的启动。当集装箱不再闪动，就说明 Nginx 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Nginx 了。</p>\n<p>Nginx Desktop 为我们在 Windows 和 macOS 中使用 Nginx 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入 <code>Nginx</code> 命令即可。</p>\n<p>使用 <code>Nginx version</code> 能够看到 Nginx 客户端的信息，我们可以在这里发现程序运行的平台：</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>λ Nginx version\nClient:\n## ......\n OS/Arch:  windows/amd64\n## ......\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"nginx-desktop-的实现原理\"><a class=\"header-anchor\" href=\"#nginx-desktop-的实现原理\">#</a> Nginx Desktop 的实现原理</h2>\n<p>通过之前小节的介绍，我们知道 Nginx 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Nginx 是依赖于 Linux 而存在的。那么问题来了，Nginx Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Nginx 的呢？</p>\n<p>其实 Nginx Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Nginx 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Nginx for Windows 和 Nginx for Mac 正是这么实现的。</p>\n<p>由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。</p>\n<p>Nginx for Windows 和 Nginx for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 Nginx daemon。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?w=1374&amp;h=517&amp;f=png&amp;s=51096\" alt=\"\"></p>\n<p>除了搭建 Linux 系统并运行 Nginx daemon 之外，Nginx Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 Nginx daemon。</p>\n<p>实现这个功能得益于 Nginx daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Nginx Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 Nginx daemon 进行通讯，并对它进行控制。</p>\n<p>这其实就是我们之前所提到 Nginx daemon 使用 RESTful Api 作为控制方式的优势体现了。</p>\n<h3 id=\"主机文件挂载\"><a class=\"header-anchor\" href=\"#主机文件挂载\">#</a> 主机文件挂载</h3>\n<p>控制能够直接在主机操作系统中进行，给我们使用 Nginx Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Nginx Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。</p>\n<p>之前我们谈到了，Nginx 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Nginx Desktop 中，指的是虚拟的 Linux 系统。</p>\n<p>当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。</p>\n<p>要实现我们所期望的效果，也就是 Nginx 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Nginx 挂载到容器之中。这个过程被集成在了 Nginx Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?w=1491&amp;h=832&amp;f=png&amp;s=97059\" alt=\"\"></p>\n<p>Nginx Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Nginx 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Nginx Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。</p>\n<h2 id=\"配置-nginx-desktop\"><a class=\"header-anchor\" href=\"#配置-nginx-desktop\">#</a> 配置 Nginx Desktop</h2>\n<p>在我们使用 Nginx Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Nginx Desktop 系列软件。</p>\n<p>我们可以通过 Nginx for Windows 或 Nginx for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。</p>\n<p>打开 Nginx for Windows 和 Nginx for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/11/165c62cd575bb4e8?w=1559&amp;h=614&amp;f=png&amp;s=339615\" alt=\"\"></p>\n<p>Nginx for Windows 和 Nginx for Mac 的配置项目较 Nginx Engine 来说要多上许多，这主要是因为 Nginx Desktop 是 Nginx Engine 的超集，所以其不仅包含了 Nginx Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。</p>\n<p>我这里抽出几个与 Nginx 相关的关键配置，分别简单说明它们的作用：</p>\n<h4 id=\"文件系统挂载配置\"><a class=\"header-anchor\" href=\"#文件系统挂载配置\">#</a> 文件系统挂载配置</h4>\n<p>在 Nginx for Windows 的 Shared Drivers 面板，以及在 Nginx for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。</p>\n<h4 id=\"资源控制配置\"><a class=\"header-anchor\" href=\"#资源控制配置\">#</a> 资源控制配置</h4>\n<p>在 Advanced 面板中，我们可以调整 Nginx 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Nginx 所能占用的最大资源。</p>\n<h4 id=\"网络配置\"><a class=\"header-anchor\" href=\"#网络配置\">#</a> 网络配置</h4>\n<p>在 Nginx for Windows 的 Network 面板，以及在 Nginx for Mac 中的 Advanced 面板中，我们可以配置 Nginx 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。</p>\n<h4 id=\"nginx-daemon-配置\"><a class=\"header-anchor\" href=\"#nginx-daemon-配置\">#</a> Nginx daemon 配置</h4>\n<p>在 Daemon 面板里，我们可以直接配置对 Nginx daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。</p>\n<p>我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 Nginx daemon 的 daemon.json 配置文件，实现更具体、完整的配置 Nginx daemon 的目的。</p>\n<h2 id=\"低系统版本解决方案\"><a class=\"header-anchor\" href=\"#低系统版本解决方案\">#</a> 低系统版本解决方案</h2>\n<p>Nginx Desktop 系列为我们在 Windows 和 macOS 中使用 Nginx 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Nginx 的运行环境，并得到像 Linux 中使用 Nginx 一样的体验。但 Nginx Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Nginx 官方也提供了相应的解决方案。</p>\n<p>首先，让我们来聊聊为什么 Nginx for Windows 和 Nginx for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Nginx for Windows 和 Nginx for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。</p>\n<p>既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。</p>\n<h3 id=\"nginx-toolbox\"><a class=\"header-anchor\" href=\"#nginx-toolbox\">#</a> Nginx Toolbox</h3>\n<p>Nginx 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Nginx 运行环境软件：Nginx Toolbox。</p>\n<p>安装 Nginx Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Nginx Toolbox 安装包的连接，方便大家下载。</p>\n<ul>\n<li><a href=\"https://download.Nginx.com/win/stable/NginxToolbox.exe\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx Toolbox for Windows<OutboundLink/></a> ( <a href=\"https://download.Nginx.com/win/stable/NginxToolbox.exe\" target=\"_blank\" rel=\"noopener noreferrer\">https://download.Nginx.com/win/stable/NginxToolbox.exe<OutboundLink/></a> )</li>\n<li><a href=\"https://download.Nginx.com/mac/stable/NginxToolbox.pkg\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx Toolbox for Mac<OutboundLink/></a> ( <a href=\"https://download.Nginx.com/mac/stable/NginxToolbox.pkg\" target=\"_blank\" rel=\"noopener noreferrer\">https://download.Nginx.com/mac/stable/NginxToolbox.pkg<OutboundLink/></a> )</li>\n</ul>\n<p>安装完 Nginx Toolbox 后，我们有几项与 Nginx for Windows 和 Nginx for Mac 不同的使用方法需要注意。</p>\n<p>由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Nginx 服务不能完全实现自动化，所以这里 Nginx 为我们提供了 Nginx QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Nginx，而不能再直接使用 PowerShell、Terminal 这类软件了。</p>\n<p>另外一个不便之处就是文件系统的挂载，由于 Nginx Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。</p>\n</div>\n",null]}