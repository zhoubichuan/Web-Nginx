{"remainingRequest":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/7.md?vue&type=template&id=78ae2468&","dependencies":[{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/7.md","mtime":1625067183830},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"通过-nginxfile-创建镜像\"><a class=\"header-anchor\" href=\"#通过-nginxfile-创建镜像\">#</a> 通过 Nginxfile 创建镜像</h1>\n<p>由于 Nginx 镜像的结构优势，使它的占用空间远小于普通的虚拟机镜像，而这就大幅减少了 Nginx 镜像在网络或者其他介质中转移所花费的时间，进而提高了我们进行迁移部署的效率。不过，你要是以为这就是 Nginx 能够快速部署的终极大招那就大错特错了。在这一小节里，我们将谈到 Nginx 特有的镜像构建定义文件，也就是 Nginxfile。通过了解它，你能真正体验一种进行秒级镜像迁移的乐趣。</p>\n<h2 id=\"关于-nginxfile\"><a class=\"header-anchor\" href=\"#关于-nginxfile\">#</a> 关于 Nginxfile</h2>\n<p>Nginxfile 是 Nginx 中用于定义镜像自动化构建流程的配置文件，在 Nginxfile 中，包含了构建镜像过程中需要执行的命令和其他操作。通过 Nginxfile 我们可以更加清晰、明确的给定 Nginx 镜像的制作过程，而由于其仅是简单、小体积的文件，在网络等其他介质中传递的速度极快，能够更快的帮助我们实现容器迁移和集群部署。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/1/1662ee4fdf802776?w=1047&amp;h=332&amp;f=png&amp;s=55112\" alt=\"\"></p>\n<p>通常来说，我们对 Nginxfile 的定义就是针对一个名为 Nginxfile 的文件，其虽然没有扩展名，但本质就是一个文本文件，所以我们可以通过常见的文本编辑器或者 IDE 创建和编辑它。</p>\n<p>Nginxfile 的内容很简单，主要以两种形式呈现，一种是注释行，另一种是指令行。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Comment\nINSTRUCTION arguments\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>在 Nginxfile 中，拥有一套独立的指令语法，其用于给出镜像构建过程中所要执行的过程。Nginxfile 里的指令行，就是由指令与其相应的参数所组成。</p>\n<h3 id=\"环境搭建与镜像构建\"><a class=\"header-anchor\" href=\"#环境搭建与镜像构建\">#</a> 环境搭建与镜像构建</h3>\n<p>如果具体来说 Nginxfile 的作用和其实际运转的机制，我们可以用一个我们开发中的常见流程来比较。</p>\n<p>在一个完整的开发、测试、部署过程中，程序运行环境的定义通常是由开发人员来进行的，因为他们更加熟悉程序运转的各个细节，更适合搭建适合程序的运行环境。</p>\n<p>在这样的前提下，为了方便测试和运维搭建相同的程序运行环境，常用的做法是由开发人员编写一套环境搭建手册，帮助测试人员和运维人员了解环境搭建的流程。</p>\n<p>而 Nginxfile 就很像这样一个环境搭建手册，因为其中包含的就是一个构建容器的过程。</p>\n<p>而比环境搭建手册更好的是，Nginxfile 在容器体系下能够完成自动构建，既不需要测试和运维人员深入理解环境中各个软件的具体细节，也不需要人工执行每一个搭建流程。</p>\n<h2 id=\"编写-nginxfile\"><a class=\"header-anchor\" href=\"#编写-nginxfile\">#</a> 编写 Nginxfile</h2>\n<p>相对于之前我们介绍的提交容器修改，再进行镜像迁移的方式相比，使用 Nginxfile 进行这项工作有很多优势，我总结了几项尤为突出的。</p>\n<ul>\n<li>Nginxfile 的体积远小于镜像包，更容易进行快速迁移和部署。</li>\n<li>环境构建流程记录了 Nginxfile 中，能够直观的看到镜像构建的顺序和逻辑。</li>\n<li>使用 Nginxfile 来构建镜像能够更轻松的实现自动部署等自动化流程。</li>\n<li>在修改环境搭建细节时，修改 Nginxfile 文件要比从新提交镜像来的轻松、简单。</li>\n</ul>\n<p>事实上，在实际使用中，我们也很少会选择容器提交这种方法来构建镜像，而是几乎都采用 Nginxfile 来制作镜像。所以说，学会 Nginxfile 的编写是所有熟练使用 Nginx 的开发者必须掌握的能力。</p>\n<p>纸上得来终觉浅，光说很多关于 Nginxfile 的概念其实对我们开发使用来说意义不大，这里我们直接学习如何编写一个用于构建镜像的 Nginxfile。</p>\n<p>首先我们来看一个完整的 Nginxfile 的例子，这是用于构建 Nginx 官方所提供的 Redis 镜像的 Nginxfile 文件。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>FROM debian:stretch-slim\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r redis &amp;&amp; useradd -r -g redis redis\n\n# grab gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.10\nRUN set -ex; \\\n\t\\\n\tfetchDeps=&quot; \\\n\t\tca-certificates \\\n\t\tdirmngr \\\n\t\tgnupg \\\n\t\twget \\\n\t&quot;; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends $fetchDeps; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\tdpkgArch=&quot;$(dpkg --print-architecture | awk -F- &#39;{ print $NF }&#39;)&quot;; \\\n\twget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch&quot;; \\\n\twget -O /usr/local/bin/gosu.asc &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc&quot;; \\\n\texport GNUPGHOME=&quot;$(mktemp -d)&quot;; \\\n\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -r &quot;$GNUPGHOME&quot; /usr/local/bin/gosu.asc; \\\n\tchmod +x /usr/local/bin/gosu; \\\n\tgosu nobody true; \\\n\t\\\n\tapt-get purge -y --auto-remove $fetchDeps\n\nENV REDIS_VERSION 3.2.12\nENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-3.2.12.tar.gz\nENV REDIS_DOWNLOAD_SHA 98c4254ae1be4e452aa7884245471501c9aa657993e0318d88f048093e7f88fd\n\n# for redis-sentinel see: http://redis.io/topics/sentinel\nRUN set -ex; \\\n\t\\\n\tbuildDeps=&#39; \\\n\t\twget \\\n\t\t\\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n\t&#39;; \\\n\tapt-get update; \\\n\tapt-get install -y $buildDeps --no-install-recommends; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\twget -O redis.tar.gz &quot;$REDIS_DOWNLOAD_URL&quot;; \\\n\techo &quot;$REDIS_DOWNLOAD_SHA *redis.tar.gz&quot; | sha256sum -c -; \\\n\tmkdir -p /usr/src/redis; \\\n\ttar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \\\n\trm redis.tar.gz; \\\n\t\\\n# disable Redis protected mode [1] as it is unnecessary in context of Nginx\n# (ports are not automatically exposed when running inside Nginx, but rather explicitly by specifying -p / -P)\n# [1]: https://github.com/antirez/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da\n\tgrep -q &#39;^#define CONFIG_DEFAULT_PROTECTED_MODE 1$&#39; /usr/src/redis/src/server.h; \\\n\tsed -ri &#39;s!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!&#39; /usr/src/redis/src/server.h; \\\n\tgrep -q &#39;^#define CONFIG_DEFAULT_PROTECTED_MODE 0$&#39; /usr/src/redis/src/server.h; \\\n# for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently &quot;if you specify any argument to redis-server, [it assumes] you are going to specify everything&quot;\n# see also https://github.com/Nginx-library/redis/issues/4#issuecomment-50780840\n# (more exactly, this makes sure the default behavior of &quot;save on SIGTERM&quot; stays functional by default)\n\t\\\n\tmake -C /usr/src/redis -j &quot;$(nproc)&quot;; \\\n\tmake -C /usr/src/redis install; \\\n\t\\\n\trm -r /usr/src/redis; \\\n\t\\\n\tapt-get purge -y --auto-remove $buildDeps\n\nRUN mkdir /data &amp;&amp; chown redis:redis /data\nVOLUME /data\nWORKDIR /data\n\nCOPY Nginx-entrypoint.sh /usr/local/bin/\nENTRYPOINT [&quot;Nginx-entrypoint.sh&quot;]\n\nEXPOSE 6379\nCMD [&quot;redis-server&quot;]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br><span class=\"line-number\">83</span><br><span class=\"line-number\">84</span><br></div><!--beforeend--></div><!--afterend--><p>其中可以很明确的见到我们之前说的 Nginxfile 文件的两种行结构，也就是指令行和注释行，接下来我们着重关注指令行，因为这是构建镜像的关键。</p>\n<h3 id=\"nginxfile-的结构\"><a class=\"header-anchor\" href=\"#nginxfile-的结构\">#</a> Nginxfile 的结构</h3>\n<p>总体上来说，我们可以将 Nginxfile 理解为一个由上往下执行指令的脚本文件。当我们调用构建命令让 Nginx 通过我们给出的 Nginxfile 构建镜像时，Nginx 会逐一按顺序解析 Nginxfile 中的指令，并根据它们不同的含义执行不同的操作。</p>\n<p>如果进行细分，我们可以将 Nginxfile 的指令简单分为五大类。</p>\n<ul>\n<li><strong>基础指令</strong>：用于定义新镜像的基础和性质。</li>\n<li><strong>控制指令</strong>：是指导镜像构建的核心部分，用于描述镜像在构建过程中需要执行的命令。</li>\n<li><strong>引入指令</strong>：用于将外部文件直接引入到构建镜像内部。</li>\n<li><strong>执行指令</strong>：能够为基于镜像所创建的容器，指定在启动时需要执行的脚本或命令。</li>\n<li><strong>配置指令</strong>：对镜像以及基于镜像所创建的容器，可以通过配置指令对其网络、用户等内容进行配置。</li>\n</ul>\n<p>这五类命令并非都会出现在一个 Nginxfile 里，但却对基于这个 Nginxfile 所构建镜像形成不同的影响。</p>\n<h2 id=\"常见-nginxfile-指令\"><a class=\"header-anchor\" href=\"#常见-nginxfile-指令\">#</a> 常见 Nginxfile 指令</h2>\n<p>熟悉 Nginxfile 的指令是编写 Nginxfile 的前提，这里我们先来介绍几个最常见的 Nginxfile 指令，它们基本上囊括了所有 Nginxfile 中 90% 以上的工作。</p>\n<h3 id=\"from\"><a class=\"header-anchor\" href=\"#from\">#</a> FROM</h3>\n<p>通常来说，我们不会从零开始搭建一个镜像，而是会选择一个已经存在的镜像作为我们新镜像的基础，这种方式能够大幅减少我们的时间。</p>\n<p>在 Nginxfile 里，我们可以通过 FROM 指令指定一个基础镜像，接下来所有的指令都是基于这个镜像所展开的。在镜像构建的过程中，Nginx 也会先获取到这个给出的基础镜像，再从这个镜像上进行构建操作。</p>\n<p>FROM 指令支持三种形式，不管是哪种形式，其核心逻辑就是指出能够被 Nginx 识别的那个镜像，好让 Nginx 从那个镜像之上开始构建工作。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>FROM &lt;image&gt; [AS &lt;name&gt;]\nFROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]\nFROM &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>既然选择一个基础镜像是构建新镜像的根本，那么 Nginxfile 中的第一条指令必须是 FROM 指令，因为没有了基础镜像，一切构建过程都无法开展。</p>\n<p>当然，一个 Nginxfile 要以 FROM 指令作为开始并不意味着 FROM 只能是 Nginxfile 中的第一条指令。在 Nginxfile 中可以多次出现 FROM 指令，当 FROM 第二次或者之后出现时，表示在此刻构建时，要将当前指出镜像的内容合并到此刻构建镜像的内容里。这对于我们直接合并两个镜像的功能很有帮助。</p>\n<h3 id=\"run\"><a class=\"header-anchor\" href=\"#run\">#</a> RUN</h3>\n<p>镜像的构建虽然是按照指令执行的，但指令只是引导，最终大部分内容还是控制台中对程序发出的命令，而 RUN 指令就是用于向控制台发送命令的指令。</p>\n<p>在 RUN 指令之后，我们直接拼接上需要执行的命令，在构建时，Nginx 就会执行这些命令，并将它们对文件系统的修改记录下来，形成镜像的变化。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>RUN &lt;command&gt;\nRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>RUN 指令是支持 \\ 换行的，如果单行的长度过长，建议对内容进行切割，方便阅读。而事实上，我们会经常看到 \\ 分割的命令，例如在上面我们贴出的 Redis 镜像的 Nginxfile 里。</p>\n<h3 id=\"entrypoint-和-cmd\"><a class=\"header-anchor\" href=\"#entrypoint-和-cmd\">#</a> ENTRYPOINT 和 CMD</h3>\n<p>基于镜像启动的容器，在容器启动时会根据镜像所定义的一条命令来启动容器中进程号为 1 的进程。而这个命令的定义，就是通过 Nginxfile 中的 ENTRYPOINT 和 CMD 实现的。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\nENTRYPOINT command param1 param2\n\nCMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]\nCMD [&quot;param1&quot;,&quot;param2&quot;]\nCMD command param1 param2\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>ENTRYPOINT 指令和 CMD 指令的用法近似，都是给出需要执行的命令，并且它们都可以为空，或者说是不在 Nginxfile 里指出。</p>\n<p>当 ENTRYPOINT 与 CMD 同时给出时，CMD 中的内容会作为 ENTRYPOINT 定义命令的参数，最终执行容器启动的还是 ENTRYPOINT 中给出的命令。</p>\n<p>关于 ENTRYPOINT 和 CMD 的更详细对比，在后一节里我们会提到。</p>\n<h3 id=\"expose\"><a class=\"header-anchor\" href=\"#expose\">#</a> EXPOSE</h3>\n<p>在<a href=\"https://juejin.im/book/5b7ba116e51d4556f30b476c/section/5b8381a56fb9a019ba684035\" target=\"_blank\" rel=\"noopener noreferrer\">第 9 节：为容器配置网络<OutboundLink/></a>中，在未做特殊定义的前提下，我们直接连接容器网络，只能访问容器明确暴露的端口。而我们之前介绍的是在容器创建时通过选项来暴露这些端口。</p>\n<p>由于我们构建镜像时更了解镜像中应用程序的逻辑，也更加清楚它需要接收和处理来自哪些端口的请求，所以在镜像中定义端口暴露显然是更合理的做法。</p>\n<p>通过 EXPOSE 指令就可以为镜像指定要暴露的端口。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>当我们通过 EXPOSE 指令配置了镜像的端口暴露定义，那么基于这个镜像所创建的容器，在被其他容器通过 <code>--link</code> 选项连接时，就能够直接允许来自其他容器对这些端口的访问了。</p>\n<h3 id=\"volume\"><a class=\"header-anchor\" href=\"#volume\">#</a> VOLUME</h3>\n<p>在一些程序里，我们需要持久化一些数据，比如数据库中存储数据的文件夹就需要单独处理。在之前的小节里，我们提到可以通过数据卷来处理这些问题。</p>\n<p>但使用数据卷需要我们在创建容器时通过 <code>-v</code> 选项来定义，而有时候由于镜像的使用者对镜像了解程度不高，会漏掉数据卷的创建，从而引起不必要的麻烦。</p>\n<p>还是那句话，制作镜像的人是最清楚镜像中程序工作的各项流程的，所以它来定义数据卷也是最合适的。所以在 Nginxfile 里，提供了 VOLUME 指令来定义基于此镜像的容器所自动建立的数据卷。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>VOLUME [&quot;/data&quot;]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>在 VOLUME 指令中定义的目录，在基于新镜像创建容器时，会自动建立为数据卷，不需要我们再单独使用 <code>-v</code> 选项来配置了。</p>\n<h3 id=\"copy-和-add\"><a class=\"header-anchor\" href=\"#copy-和-add\">#</a> COPY 和 ADD</h3>\n<p>在制作新的镜像的时候，我们可能需要将一些软件配置、程序代码、执行脚本等直接导入到镜像内的文件系统里，使用 COPY 或 ADD 指令能够帮助我们直接从宿主机的文件系统里拷贝内容到镜像里的文件系统中。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\nADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\n\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]\nADD [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>COPY 与 ADD 指令的定义方式完全一样，需要注意的仅是当我们的目录中存在空格时，可以使用后两种格式避免空格产生歧义。</p>\n<p>对比 COPY 与 ADD，两者的区别主要在于 ADD 能够支持使用网络端的 URL 地址作为 src 源，并且在源文件被识别为压缩包时，自动进行解压，而 COPY 没有这两个能力。</p>\n<p>虽然看上去 COPY 能力稍弱，但对于那些不希望源文件被解压或没有网络请求的场景，COPY 指令是个不错的选择。</p>\n<h2 id=\"构建镜像\"><a class=\"header-anchor\" href=\"#构建镜像\">#</a> 构建镜像</h2>\n<p>在编写好 Nginxfile 之后，我们就可以构建我们所定义的镜像了，构建镜像的命令为 <code>Nginx build</code>。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx build ./webapp\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p><code>Nginx build</code> 可以接收一个参数，需要特别注意的是，这个参数为一个目录路径 ( 本地路径或 URL 路径 )，而并非 Nginxfile 文件的路径。在 <code>Nginx build</code> 里，这个我们给出的目录会作为构建的环境目录，我们很多的操作都是基于这个目录进行的。</p>\n<p>例如，在我们使用 COPY 或是 ADD 拷贝文件到构建的新镜像时，会以这个目录作为基础目录。</p>\n<p>在默认情况下，<code>Nginx build</code> 也会从这个目录下寻找名为 Nginxfile 的文件，将它作为 Nginxfile 内容的来源。如果我们的 Nginxfile 文件路径不在这个目录下，或者有另外的文件名，我们可以通过 <code>-f</code> 选项单独给出 Nginxfile 文件的路径。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx build -t webapp:latest -f ./webapp/a.Nginxfile ./webapp\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>当然，在构建时我们最好总是携带上 <code>-t</code> 选项，用它来指定新生成镜像的名称。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx build -t webapp:latest ./webapp\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></div>\n",null]}