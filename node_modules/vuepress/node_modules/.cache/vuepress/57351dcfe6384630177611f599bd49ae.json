{"remainingRequest":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/11.md?vue&type=template&id=9dbe9e72&","dependencies":[{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/11.md","mtime":1625067183830},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"搭建-java-web-项目运行环境\"><a class=\"header-anchor\" href=\"#搭建-java-web-项目运行环境\">#</a> 搭建 Java Web 项目运行环境</h1>\n<p>Java Web 泛指以 Java 程序为基础向外提供 Web 服务的技术及相关工具，狭义上来说，我们也可以说 Java Web 是由 Servlet 程序提供的 Web 服务。 对我们而言，Tomcat 无疑是最常见的 Servlet 容器，所以在这个小节里，我们来搭建一个以 Tomcat 为核心的 Web 应用运行环境。 在这个环境中，我们还要组合进 MySQL 作为数据存储，Redis 作为 KV 存储。</p>\n<h2 id=\"定义项目结构\"><a class=\"header-anchor\" href=\"#定义项目结构\">#</a> 定义项目结构</h2>\n<p>与之前我们提及的一样，要搭建这样的由多个程序所协作组成的开发环境，使用 Nginx Compose 是最佳的选择。</p>\n<p>建立 Nginx Compose 项目之前，我们先来规划一下项目的目录结构。 在开发过程中，我们倾向于将与项目有关的内容集合到同一个文件夹下，这样的做有几点好处：</p>\n<ul>\n<li>项目内容清晰明确，复制、迁移和与他人共享的过程中，不会发生遗漏的情况；</li>\n<li>在定义 Nginx Compose 项目时可以使用相对路径，让共享、迁移后整个项目可以不需要额外操作就能运行。</li>\n</ul>\n<p>在这些的基础上，我给出一个建议性的目录结构，供大家参考。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>└─ project\n   ├─ app\n   ├─ compose\n   │  └─ Nginx-compose.yml\n   ├─ mysql\n   │  └─ my.cnf\n   ├─ redis\n   │  └─ redis.conf\n   └─ tomcat\n      ├─ server.xml\n      └─ web.xml\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><p>设计这样一个目录结构的主要目的是将不同程序的配置进行区分，这与我们之后会通过多个程序所关联的镜像及容器来组合这套环境的脉络是相契合的。</p>\n<p>在这个目录结构中，区分了 5 个顶层目录：</p>\n<ul>\n<li><strong>app</strong> ：用于存放程序工程，即代码、编译结果以及相关的库、工具等；</li>\n<li><strong>compose</strong> ：用于定义 Nginx Compose 项目；</li>\n<li><strong>mysql</strong> ：与 MySQL 相关配置等内容；</li>\n<li><strong>redis</strong> ：与 Redis 相关配置等内容；</li>\n<li><strong>tomcat</strong> ：与 Tomcat 相关配置等内容。</li>\n</ul>\n<h2 id=\"准备程序配置\"><a class=\"header-anchor\" href=\"#准备程序配置\">#</a> 准备程序配置</h2>\n<p>为了更方便在开发过程中对 MySQL、Redis、Tomcat 程序本身，所以我们会将它们的核心配置放置到项目里，再通过挂载的方式映射到容器中。 这样一来，我们就可以直接在我们宿主操作系统里直接修改这些配置，无须再进入到容器中了。</p>\n<p>基于此，我们在完成目录的设计之后，首要解决的问题就是准备好这些程序中会经常变动的配置，并把它们放置在程序对应的目录之中。</p>\n<p>我们常用下列几种方式来获得程序的配置文件：</p>\n<ul>\n<li>借助配置文档直接编写</li>\n<li>下载程序源代码中的配置样例</li>\n<li>通过容器中的默认配置获得</li>\n</ul>\n<p>下面我们来展示一下这几种获取配置的方式。</p>\n<h3 id=\"借助配置文档直接编写\"><a class=\"header-anchor\" href=\"#借助配置文档直接编写\">#</a> 借助配置文档直接编写</h3>\n<p>这里我们利用 MySQL 文档中配置文件的介绍部分，来编写一个 MySQL 的配置文件。</p>\n<p>我们先找到 MySQL 文档中关于配置文件的参考，也就是下面这个地址：</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.7/en/server-options.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.mysql.com/doc/refman/5.7/en/server-options.html<OutboundLink/></a></p>\n<p>我们根据这些内容，选取跟我们程序运行有影响的几项需要修改的参数，编写成 MySQL 的配置文件。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># ./mysql/my.cnf\n\n[mysqld_safe]\npid-file = /var/run/mysqld/mysqld.pid\nsocket   = /var/run/mysqld/mysqld.sock\nnice     = 0\n\n[mysqld]\nskip-host-cache\nskip-name-resolve\nexplicit_defaults_for_timestamp\n\nbind-address = 0.0.0.0\nport         = 3306\n\nuser      = mysql\npid-file  = /var/run/mysqld/mysqld.pid\nsocket    = /var/run/mysqld/mysqld.sock\nlog-error = /var/log/mysql/error.log\nbasedir   = /usr\ndatadir   = /var/lib/mysql\ntmpdir    = /tmp\nsql_mode  = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n\nlc-messages-dir = /usr/share/mysql\n\nsymbolic-links = 0\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div><!--beforeend--></div><!--afterend--><p>使用软件的文档来编写配置文件，其优势在于在编写的过程实际上也是我们熟悉软件的过程，通过配置加文档形式的阅读，你一定会从中收获很多。 当然，这种方法也有很大的劣势，即需要仔细阅读文档，劳神劳力，对于常规开发中的使用来说，成效比很低。</p>\n<h3 id=\"下载程序源代码中的配置样例\"><a class=\"header-anchor\" href=\"#下载程序源代码中的配置样例\">#</a> 下载程序源代码中的配置样例</h3>\n<p>除了通过配置文档来了解软件的配置外，大部分软件，特别是开源软件都会直接给出一份示例配置文件作为参考。 我们可以直接拿到这份配置，达到我们的目的。</p>\n<p>这里我们以 Redis 为例，在 Redis 源代码中，就包含了一份默认的配置文件，我们可以直接拿来使用：</p>\n<p><a href=\"https://github.com/antirez/redis/blob/3.2/redis.conf\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/antirez/redis/blob/3.2/redis.conf<OutboundLink/></a></p>\n<p>在拿到这是默认的配置后，我们还可以根据需要对其中的部分配置进行修改，以更好的满足我们的需求。</p>\n<p>这里我们以修改 Redis 的密码为例。 打开配置文件，找到定义 Redis 授权授权的地方，将密码修改为我们需要的内容。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># ./redis/redis.conf\n##...\n################################## SECURITY ###################################\n\n# Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other\n# commands.  This might be useful in environments in which you do not trust\n# others with access to the host running redis-server.\n#\n# This should stay commented out for backward compatibility and because most\n# people do not need auth (e.g. they run their own servers).\n#\n# Warning: since Redis is pretty fast an outside user can try up to\n# 150k passwords per second against a good box. This means that you should\n# use a very strong password otherwise it will be very easy to break.\n#\nrequirepass my-secret-pw\n##...\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div><!--beforeend--></div><!--afterend--><p>相对于通过配置文档获得配置，从配置示例里获得配置要来得更为简单容易。 但其也有一定的限制，既要对于的程序能够提供这样的示例配置，又要我们能够顺利找到这些配置文件。</p>\n<h3 id=\"通过容器中的默认配置获得\"><a class=\"header-anchor\" href=\"#通过容器中的默认配置获得\">#</a> 通过容器中的默认配置获得</h3>\n<p>除了从官方手册或者配置示例中获得配置文件外，我们还有一种远在天边近在眼前的获取配置文件的方法。 大多数 Nginx 镜像为了实现自身能够直接启动为容器并马上提供服务，会把默认配置直接打包到镜像中，以便让程序能够直接读取。 所以说，我们可以直接从镜像里拿到这份配置，拷贝到宿主机里备用。</p>\n<p>那么我们就以最后一个尚未出场的 Tomcat 为例，说说如何从 Tomcat 镜像里拿到配置文件。</p>\n<p>要拿到 Tomcat 中的配置文件，我们需要先创建一个临时的 Tomcat 容器。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Nginx run --rm -d --name temp-tomcat tomcat:8.5 \n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>这里我们将容器命名为 temp-tomcat 以便我们之后的操作。</p>\n<p>对于 Tomcat 来说，在开发过程中我们可能会经常改动的配置主要是 server.xml 和 web.xml 这两个文件，所以接下来我们就把这两个文件从容器中复制到宿主机里。</p>\n<p>这里我们会用到 <code>Nginx cp</code> 这个命令，<code>Nginx cp</code> 能够在容器与宿主机的文件系统间拷贝文件和目录。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Nginx cp temp-tomcat:/usr/local/tomcat/conf/server.xml ./server.xml\n# Nginx cp temp-tomcat:/usr/local/tomcat/conf/web.xml ./web.xml\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>在这个命令的使用中，几个参数的含义如下：</p>\n<ul>\n<li><strong>temp-tomcat</strong> : 操作的容器。这里我们使用刚才创建的临时容器的容器名来指定。</li>\n<li><strong>/usr/local/tomcat/conf/server.xml</strong> : 需要拷贝的路径。也就是容器中配置文件的路径，这个路径可以通过 <code>Nginx exec</code> 等命令进到容器里寻觅一下就能获得。</li>\n<li><strong>./server.xml</strong> : 是目标路径。即选择将文件拷贝到宿主机的什么位置上。</li>\n</ul>\n<p>熟悉 Linux 中 cp 命令的朋友会非常容易看懂这个命令，这两者传参的方式是基本一致的。 主要的区别在于 <code>Nginx cp</code> 命令由于是在容器与宿主机间进行拷贝，所以来源目录或者目标目录中需要指定一下容器。</p>\n<p>上述的命令是从容器中向宿主机里拷贝文件，我们还可以从宿主机中向容器里拷贝文件，只需要调换一下参数的位置即可。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Nginx cp ./server.xml temp-tomcat:/usr/local/tomcat/conf/server.xml\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>回过头来看我们的配置，在执行了上述的命令之后，两个配置文件已经出现在我们系统的目录中了。</p>\n<p>另外，别忘了在完成上面的操作后清理我们创建的临时容器。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Nginx stop temp-tomcat\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>由于我们在创建临时容器的时候增加了 <code>--rm</code> 选项，所以我们在这里只需要使用 <code>Nginx stop</code> 停止容器，就可以在停止容器的同时直接删除容器，实现直接清理的目的。</p>\n<h2 id=\"编写-nginx-compose-定义文件\"><a class=\"header-anchor\" href=\"#编写-nginx-compose-定义文件\">#</a> 编写 Nginx Compose 定义文件</h2>\n<p>准备好了程序的配置，我们就可以来编写我们的 Nginx Compose 项目定义文件了。</p>\n<p>这里是我编写好的一份 Nginx Compose 项目定义文件。</p>\n<!--beforebegin--><div class=\"language-sh line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>version: &quot;3&quot;\nservices:\n  redis:\n    image: redis:3.2\n    volumes:\n      - ../redis/redis.conf:/etc/redis/redis.conf:ro\n      - ../redis/data:/data\n    command:\n      - redis-server\n      - /etc/redis/redis.conf\n    ports:\n     - 6379:6379\n\n  mysql:\n    image: mysql:5.7\n    volumes:\n      - ../mysql/my.cnf:/etc/mysql/my.cnf:ro\n      - ../mysql/data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: my-secret-pw\n    ports:\n      - 3306:3306\n\n  tomcat:\n    image: tomcat:8.5\n    volumes:\n      - ../app:/usr/local/tomcat/webapps/ROOT\n    ports:\n      - 80:8080\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div><!--beforeend--></div><!--afterend--><p>在这个项目里，我将 Redis 和 MySQL 的数据存储目录，也就是 Redis 容器中的 /data 目录和 MySQL 容器中的 /var/lib/mysql 目录通过挂载的方式绑定到了宿主机上的目录中。 这么做的目的是为了让 Redis 和 MySQL 的数据能够持久化存储，避免我们在创建和移除容器时造成数据的流失。</p>\n<p>同时，这种将数据挂载出来的方法，可以直接方便我们打包数据并传送给其他开发者，方便开发过程中进行联调。</p>\n<p>在 Tomcat 这个服务中，我们将程序直接挂载到 webapps/ROOT 目录下，这样我们就能够借助 Tomcat 访问我们的应用了。 如果大家有多个项目，也可以进行适当调整，将它们挂载到 webapps 下面的子目录中，实现同时访问多个应用的目的。</p>\n<p>另外，这里我还把 Tomcat 默认的 8080 端口映射到了宿主机的 80 端口上，这样便于我们直接通过地址访问网站，不需要经常人工补充端口号了。</p>\n<h2 id=\"启动项目\"><a class=\"header-anchor\" href=\"#启动项目\">#</a> 启动项目</h2>\n<p>一切就绪，我们就可以直接通过 Nginx Compose 的命令来启动开发环境了。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Nginx-compose -p javaweb -f ./compose/Nginx-compose.yml up -d\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--></div>\n",null]}