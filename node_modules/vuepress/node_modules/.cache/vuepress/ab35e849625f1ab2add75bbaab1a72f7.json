{"remainingRequest":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/12.md?vue&type=template&id=9dbdb5b4&","dependencies":[{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/12.md","mtime":1625067183830},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"服务发现应用是很多服务化系统的组成部分，所以在开发、测试环境中也就有必要配备一套服务发现体系来配合我们的开发、测试工作。在这一小节里，我们就来谈谈如何在 Nginx 环境下部署服务发现应用。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(1),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"实现服务发现的方法有很多种，其中较为常见的一种是利用分布式注册中心，解决服务之间协调的问题。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"在众多注册中心应用中，Zookeeper 是较为常见和常用的一款程序，这里我们就以 Zookeeper 为例，介绍如何使用 Nginx 搭建 Zookeeper 的运行环境。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(2),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"由于 Zookeeper 的运行并不需要太多的关注配置和调整，这里我们就以最基础的形式来设计 Nginx Compose 项目的结构。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(3),\n    _c(\"p\", [\n      _vm._v(\"为了方便日常操作，我们依然编写了 \"),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"http://compose.sh\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"compose.sh\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\" 这个脚本来辅助我们控制 Nginx Compose 项目。\")\n    ]),\n    _vm._v(\" \"),\n    _vm._m(4),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"很多读者会问到一个问题，怎么样才能通过 Nginx 的虚拟化技术实现在一个机器上模拟出多台机器的效果。或者说一个我们这里会涉及的具体问题，如何只用一个 Nginx 来模拟一个高可用的 Zookeeper 集群。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"我们知道，要实现 Zookeeper 的高可用，至少需要三个 Zookeeper 节点进行协作，所以这里我们用三个单独的 Nginx Compose 服务定义来分别定义这三个节点。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(5),\n    _c(\"p\", [\n      _vm._v(\n        \"在这个 Nginx Compose 项目中，我们定义的三个 Zookeeper 服务都直接使用了官方制作的 zookeeper 镜像。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"在这个镜像里，我们可以留意定制 ZOO_MY_ID 和 ZOO_SERVERS 这两个环境变量。这两个变量主要是用来识别 Zookeeper 集群中不同 Zookeeper 程序的。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"其中 ZOO_MY_ID 是 Zookeeper 在集群中的编号，而 ZOO_SERVERS 用来定义集群中的所有 Zookeeper 及它们的连接方式。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\"我们以 zk1 这个服务为例来解释一下 ZOO_SERVERS 的定义方法。\")\n    ]),\n    _vm._v(\" \"),\n    _vm._m(6),\n    _vm._m(7),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\"在这个例子里，我们描述了三个 Zookeeper 程序的连接地址。\")\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"由于每个容器都有独立的端口表，所以即使这些程序都运行在一个主机里，我们依然不需要担心，它们会造成端口的冲突。所以这里我们直接使用默认的 2888 和 3888 来进行服务间的相互通信即可。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"而在进行容器互联的过程中，我们可以通过 Nginx 的解析机制，直接填入对应服务的名称替代它们的 IP 地址，也就是这个例子里的 zk2 和 zk3。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(8),\n    _vm._v(\" \"),\n    _vm._m(9),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"这里的 always 指的是不论任何情况，容器出现问题后都会自动重启，也包括 Nginx 服务本身在启动后容器也会自动启动。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"另外，restart 还支持几种配置：\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"配置值\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"说明\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"no\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"不设重启机制\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"always\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"总是重启\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"on-failure\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"在异常退出时重启\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"unless-stopped\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"除非由停止命令结束，其他情况都重启\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"在实际使用中，我们可以根据需要选择不同的重启策略。\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"而这个项目里，我们希望 Zookeeper 能够一直健壮的运行，所以使用了 always 这个重启策略。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(10),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"一切就绪，我们就可以直接通过 Nginx Compose 的命令来启动开发环境了。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(11),\n    _vm._m(12),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"在这节中，我们展示了在开发中使用 Nginx 部署服务发现工具的过程，下面就是大家自己动手进行实践的时候了。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"本小节中的示例，已经更新到了：\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href:\n              \"https://github.com/youmingdot/Nginx-book-for-developer-samples\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [\n          _vm._v(\n            \"https://github.com/youmingdot/Nginx-book-for-developer-samples\"\n          ),\n          _c(\"OutboundLink\")\n        ],\n        1\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"大家可以在实践过程中的用其作为参考。\")]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"欢迎大家通过留言的方式说出你的实践之路。我会选出有代表性的优质留言，推荐给大家。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"同时，如果大家在实践过程中遇到困难，或者有自己的实践心得要与大家分享，可以加入到这本小册的官方微信群中，参与对相关问题的讨论。\"\n      )\n    ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"在开发环境中使用服务发现\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#在开发环境中使用服务发现\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 在开发环境中使用服务发现\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\n      \"h2\",\n      { attrs: { id: \"使用-nginx-compose-模拟-zookeeper-集群\" } },\n      [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#使用-nginx-compose-模拟-zookeeper-集群\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 使用 Nginx Compose 模拟 Zookeeper 集群\")\n      ]\n    )\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"设计目录结构\" } }, [\n      _c(\n        \"a\",\n        { staticClass: \"header-anchor\", attrs: { href: \"#设计目录结构\" } },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 设计目录结构\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n        _c(\"code\", [\n          _vm._v(\n            \"└─ project\\n   ├─ bin\\n   │  └─ compose.sh\\n   └─ compose\\n      └─ Nginx-compose.yml\\n\\n\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n        _c(\"br\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"编写-nginx-compose-yml\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#编写-nginx-compose-yml\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 编写 Nginx-compose.yml\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n        _c(\"code\", [\n          _vm._v(\n            \"version: '3'\\n\\nservices:\\n\\n  zk1:\\n    image: zookeeper:3.4\\n    restart: always\\n    hostname: zk1\\n    environment:\\n      ZOO_MY_ID: 1\\n      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zk2:2888:3888 server.3=zk3:2888:3888\\n    ports:\\n      - 2181:2181\\n\\n  zk2:\\n    image: zookeeper:3.4\\n    restart: always\\n    hostname: zk2\\n    environment:\\n      ZOO_MY_ID: 2\\n      ZOO_SERVERS: server.1=zk1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zk3:2888:3888\\n    ports:\\n      - 2182:2181\\n\\n  zk3:\\n    image: zookeeper:3.4\\n    restart: always\\n    hostname: zk3\\n    environment:\\n      ZOO_MY_ID: 3\\n      ZOO_SERVERS: server.1=zk1:2888:3888 server.2=zk2:2888:3888 server.3=0.0.0.0:2888:3888\\n    ports:\\n      - 2183:2181\\n\\n\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"10\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"11\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"12\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"13\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"14\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"15\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"16\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"17\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"18\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"19\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"20\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"21\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"22\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"23\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"24\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"25\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"26\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"27\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"28\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"29\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"30\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"31\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"32\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"33\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"34\")]),\n        _c(\"br\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n        _c(\"code\", [\n          _vm._v(\n            \"server.1=0.0.0.0:2888:3888 server.2=zk2:2888:3888 server.3=zk3:2888:3888\\n\\n\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n        _c(\"br\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"我们可以在 ZOO_SERVERS 中定义所有处于 Zookeeper 集群中的程序，通过空格来间隔它们。而每个服务的的定义形式为 \"\n      ),\n      _c(\"code\", [_vm._v(\"server.[id]=[host]:[port]:[port]\")]),\n      _vm._v(\"，所以就有了上面例子中我们看到的样子。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"重启机制\" } }, [\n      _c(\"a\", { staticClass: \"header-anchor\", attrs: { href: \"#重启机制\" } }, [\n        _vm._v(\"#\")\n      ]),\n      _vm._v(\" 重启机制\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"在项目定义中，我们还注意到了 \"),\n      _c(\"code\", [_vm._v(\"restart: always\")]),\n      _vm._v(\" 这个配置，这个配置主要是用来控制容器的重启策略的。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"启动项目\" } }, [\n      _c(\"a\", { staticClass: \"header-anchor\", attrs: { href: \"#启动项目\" } }, [\n        _vm._v(\"#\")\n      ]),\n      _vm._v(\" 启动项目\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n        _c(\"code\", [_vm._v(\"# ./bin/compose.sh up -d\\n\\n\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n        _c(\"br\"),\n        _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n        _c(\"br\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"留言互动\" } }, [\n      _c(\"a\", { staticClass: \"header-anchor\", attrs: { href: \"#留言互动\" } }, [\n        _vm._v(\"#\")\n      ]),\n      _vm._v(\" 留言互动\")\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}