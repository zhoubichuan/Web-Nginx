{"remainingRequest":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/16.md?vue&type=template&id=9dba12bc&","dependencies":[{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/src/base/build/16.md","mtime":1625067183830},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoubichuan/Desktop/web/Web-Nginx/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"为容器配置网络\"><a class=\"header-anchor\" href=\"#为容器配置网络\">#</a> 为容器配置网络</h1>\n<p>在互联网时代，网络已经成为绝大多数应用进行数据交换的主要通道，Nginx 作为集群部署的利器，在网络支持上也下了许多功夫。功能丰富和强大，并不代表使用复杂，在 Nginx 的封装下，我们依然可以通过命令和参数轻松的为容器制定不同的网络方案。在这一节中，我们就来了解 Nginx 的网络部分。</p>\n<h2 id=\"容器网络\"><a class=\"header-anchor\" href=\"#容器网络\">#</a> 容器网络</h2>\n<p>在之前介绍 Nginx 核心组成的时候，我们已经简单谈到了容器网络的相关知识。容器网络实质上也是由 Nginx 为应用程序所创造的虚拟环境的一部分，它能让应用从宿主机操作系统的网络环境中独立出来，形成容器自有的网络设备、IP 协议栈、端口套接字、IP 路由表、防火墙等等与网络相关的模块。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?w=1570&amp;h=486&amp;f=png&amp;s=50933\" alt=\"\"></p>\n<p>还是回归上面这幅之前展示过的关于 Nginx 网络的图片。在 Nginx 网络中，有三个比较核心的概念，也就是：<strong>沙盒 ( Sandbox )</strong>、<strong>网络 ( Network )</strong>、<strong>端点 ( Endpoint )</strong>。</p>\n<ul>\n<li><strong>沙盒</strong>提供了容器的虚拟网络栈，也就是之前所提到的端口套接字、IP 路由表、防火墙等的内容。其实现隔离了容器网络与宿主机网络，形成了完全独立的容器网络环境。</li>\n<li><strong>网络</strong>可以理解为 Nginx 内部的虚拟子网，网络内的参与者相互可见并能够进行通讯。Nginx 的这种虚拟网络也是于宿主机网络存在隔离关系的，其目的主要是形成容器间的安全通讯环境。</li>\n<li><strong>端点</strong>是位于容器或网络隔离墙之上的洞，其主要目的是形成一个可以控制的突破封闭的网络环境的出入口。当容器的端点与网络的端点形成配对后，就如同在这两者之间搭建了桥梁，便能够进行数据传输了。</li>\n</ul>\n<p>这三者形成了 Nginx 网络的核心模型，也就是容器网络模型 ( Container Network Model )。</p>\n<h3 id=\"浅析-nginx-的网络实现\"><a class=\"header-anchor\" href=\"#浅析-nginx-的网络实现\">#</a> 浅析 Nginx 的网络实现</h3>\n<p>容器网络模型为容器引擎提供了一套标准的网络对接范式，而在 Nginx 中，实现这套范式的是 Nginx 所封装的 libnetwork 模块。</p>\n<p>而对于网络的具体实现，在 Nginx 的发展过程中也逐渐抽象，形成了统一的抽象定义。进而通过这些抽象定义，便可以对 Nginx 网络的实现方式进行不同的变化。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/23/166042a49627f8a6?w=1304&amp;h=702&amp;f=png&amp;s=65589\" alt=\"\"></p>\n<p>目前 Nginx 官方为我们提供了五种 Nginx 网络驱动，分别是：<strong>Bridge Driver</strong>、<strong>Host Driver</strong>、<strong>Overlay Driver</strong>、<strong>MacLan Driver</strong>、<strong>None Driver</strong>。</p>\n<p>其中，Bridge 网络是 Nginx 容器的默认网络驱动，简而言之其就是通过网桥来实现网络通讯 ( 网桥网络的实现可以基于硬件，也可以基于软件 )。而 Overlay 网络是借助 Nginx 集群模块 Nginx Swarm 来搭建的跨 Nginx Daemon 网络，我们可以通过它搭建跨物理主机的虚拟网络，进而让不同物理机中运行的容器感知不到多个物理机的存在。</p>\n<p>Bridge Driver 和 Overlay Driver 在开发中使用频率较高，之后的小节讲解里，关于容器网络的部分我们都主要围绕着它们展开。</p>\n<p>当然，关于 Nginx 的网络实现还有非常多的细节。对于开发者来说，我们只是 Nginx 的使用者而非技术专家，所以这里我们不做更多详尽的论述。</p>\n<h2 id=\"容器互联\"><a class=\"header-anchor\" href=\"#容器互联\">#</a> 容器互联</h2>\n<p>由于 Nginx 提倡容器与应用共生的轻量级容器理念，所以容器中通常只包含一种应用程序，但我们知道，如今纷繁的系统服务，没有几个是可以通过单一的应用程序支撑的。拿最简单的 Web 应用为例，也至少需要业务应用、数据库应用、缓存应用等组成。也就是说，在 Nginx 里我们需要通过多个容器来组成这样的系统。</p>\n<p>而这些互联网时代的应用，其间的通讯方式主要以网络为主，所以打通容器间的网络，是使它们能够互相通讯的关键所在。</p>\n<p>要让一个容器连接到另外一个容器，我们可以在容器通过 <code>Nginx create</code> 或 <code>Nginx run</code> 创建时通过 <code>--link</code> 选项进行配置。</p>\n<p>例如，这里我们创建一个 MySQL 容器，将运行我们 Web 应用的容器连接到这个 MySQL 容器上，打通两个容器间的网络，实现它们之间的网络互通。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql\n$ sudo Nginx run -d --name webapp --link mysql webapp:latest\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>容器间的网络已经打通，那么我们要如何在 Web 应用中连接到 MySQL 数据库呢？Nginx 为容器间连接提供了一种非常友好的方式，我们只需要将容器的网络命名填入到连接地址中，就可以访问需要连接的容器了。</p>\n<p>假设我们在 Web 应用中使用的是 JDBC 进行数据库连接的，我们可以这么填写连接。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>String url = &quot;jdbc:mysql://mysql:3306/webapp&quot;;\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>在这里，连接地址中的 mysql 就好似我们常见的域名解析，Nginx 会将其指向 MySQL 容器的 IP 地址。</p>\n<p>看到这里，读者们有没有发现 Nginx 在容器互通中为我们带来的一项便利，也就是我们不再需要真实的知道另外一个容器的 IP 地址就能进行连接。再具体来对比，在以往的开发中，我们每切换一个环境 ( 例如将程序从开发环境提交到测试环境 )，都需要重新配置程序中的各项连接地址等参数，而在 Nginx 里，我们并不需要关心这个，只需要程序中配置被连接容器的别名，映射 IP 的工作就交给 Nginx 完成了。</p>\n<h3 id=\"暴露端口\"><a class=\"header-anchor\" href=\"#暴露端口\">#</a> 暴露端口</h3>\n<p>需要注意的是，虽然容器间的网络打通了，但并不意味着我们可以任意访问被连接容器中的任何服务。Nginx 为容器网络增加了一套安全机制，只有容器自身允许的端口，才能被其他容器所访问。</p>\n<p>这个容器自我标记端口可被访问的过程，我们通常称为暴露端口。我们在 <code>Nginx ps</code> 的结果中可以看到容器暴露给其他容器访问的端口。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES\n95507bc88082        mysql:5.7           &quot;Nginx-entrypoint.s…&quot;   17 seconds ago      Up 16 seconds       3306/tcp, 33060/tcp   mysql\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>这里我们看到，MySQL 这个容器暴露的端口是 3306 和 33060。所以我们连接到 MySQL 容器后，只能对这两个端口进行访问。</p>\n<p>端口的暴露可以通过 Nginx 镜像进行定义，也可以在容器创建时进行定义。在容器创建时进行定义的方法是借助 <code>--expose</code> 这个选项。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes --expose 13306 --expose 23306 mysql:5.7\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>这里我们为 MySQL 暴露了 13306 和 23306 这两个端口，暴露后我们可以在 <code>Nginx ps</code> 中看到这两个端口已经成功的打开。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx ps \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                       NAMES\n3c4e645f21d7        mysql:5.7           &quot;Nginx-entrypoint.s…&quot;   4 seconds ago       Up 3 seconds        3306/tcp, 13306/tcp, 23306/tcp, 33060/tcp   mysql\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>容器暴露了端口只是类似我们打开了容器的防火墙，具体能不能通过这个端口访问容器中的服务，还需要容器中的应用监听并处理来自这个端口的请求。</p>\n<h3 id=\"通过别名连接\"><a class=\"header-anchor\" href=\"#通过别名连接\">#</a> 通过别名连接</h3>\n<p>纯粹的通过容器名来打开容器间的网络通道缺乏一定的灵活性，在 Nginx 里还支持连接时使用别名来使我们摆脱容器名的限制。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name webapp --link mysql:database webapp:latest\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>在这里，我们使用 <code>--link &lt;name&gt;:&lt;alias&gt;</code> 的形式，连接到 MySQL 容器，并设置它的别名为 database。当我们要在 Web 应用中使用 MySQL 连接时，我们就可以使用 database 来代替连接地址了。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>String url = &quot;jdbc:mysql://database:3306/webapp&quot;;\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"管理网络\"><a class=\"header-anchor\" href=\"#管理网络\">#</a> 管理网络</h2>\n<p>容器能够互相连接的前提是两者同处于一个网络中 ( 这里的网络是指容器网络模型中的网络 )。这个限制很好理解，刚才我们说了，网络这个概念我们可以理解为 Nginx 所虚拟的子网，而容器网络沙盒可以看做是虚拟的主机，只有当多个主机在同一子网里时，才能互相看到并进行网络数据交换。</p>\n<p>当我们启动 Nginx 服务时，它会为我们创建一个默认的 bridge 网络，而我们创建的容器在不专门指定网络的情况下都会连接到这个网络上。所以我们刚才之所以能够把 webapp 容器连接到 mysql 容器上，其原因是两者都处于 bridge 这个网络上。</p>\n<p>我们通过 <code>Nginx inspect</code> 命令查看容器，可以在 Network 部分看到容器网络相关的信息。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx inspect mysql\n[\n    {\n## ......\n        &quot;NetworkSettings&quot;: {\n## ......\n            &quot;Networks&quot;: {\n                &quot;bridge&quot;: {\n                    &quot;IPAMConfig&quot;: null,\n                    &quot;Links&quot;: null,\n                    &quot;Aliases&quot;: null,\n                    &quot;NetworkID&quot;: &quot;bc14eb1da66b67c7d155d6c78cb5389d4ffa6c719c8be3280628b7b54617441b&quot;,\n                    &quot;EndpointID&quot;: &quot;1e201db6858341d326be4510971b2f81f0f85ebd09b9b168e1df61bab18a6f22&quot;,\n                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,\n                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,\n                    &quot;IPPrefixLen&quot;: 16,\n                    &quot;IPv6Gateway&quot;: &quot;&quot;,\n                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,\n                    &quot;GlobalIPv6PrefixLen&quot;: 0,\n                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,\n                    &quot;DriverOpts&quot;: null\n                }\n            }\n## ......\n        }\n## ......\n    }\n]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div><!--beforeend--></div><!--afterend--><p>这里我们能够看到 mysql 容器在 bridge 网络中所分配的 IP 地址，其自身的端点、Mac 地址，bridge 网络的网关地址等信息。</p>\n<p>Nginx 默认创建的这个 bridge 网络是非常重要的，理由自然是在没有明确指定容器网络时，容器都会连接到这个网络中。在之前讲解 Nginx for Win 和 Nginx for Mac 安装的时候，我们提到过这两个软件的配置中都有一块配置 Nginx 中默认网络的内容，这块所指的默认网络就是这个 bridge 网络。</p>\n<h3 id=\"创建网络\"><a class=\"header-anchor\" href=\"#创建网络\">#</a> 创建网络</h3>\n<p>在 Nginx 里，我们也能够创建网络，形成自己定义虚拟子网的目的。</p>\n<p>Nginx CLI 里与网络相关的命令都以 <code>Nginx network</code> 开头，其中创建网络的命令是 <code>Nginx network create</code>。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx network create -d bridge individual\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>通过 <code>-d</code> 选项我们可以为新的网络指定驱动的类型，其值可以是刚才我们所提及的 bridge、host、overlay、maclan、none，也可以是其他网络驱动插件所定义的类型。这里我们使用的是 Bridge Driver ( 当我们不指定网络驱动时，Nginx 也会默认采用 Bridge Driver 作为网络驱动 )。</p>\n<p>通过 <code>Nginx network ls</code> 或是 <code>Nginx network list</code> 可以查看 Nginx 中已经存在的网络。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nbc14eb1da66b        bridge              bridge              local\n35c3ef1cc27d        individual          bridge              local\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><p>之后在我们创建容器时，可以通过 <code>--network</code> 来指定容器所加入的网络，一旦这个参数被指定，容器便不会默认加入到 bridge 这个网络中了 ( 但是仍然可以通过 <code>--network bridge</code> 让其加入 )。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes --network individual mysql:5.7\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>我们通过 <code>Nginx inspect</code> 观察一下此时的容器网络。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx inspect mysql\n[\n    {\n## ......\n        &quot;NetworkSettings&quot;: {\n## ......\n            &quot;Networks&quot;: {\n                &quot;individual&quot;: {\n                    &quot;IPAMConfig&quot;: null,\n                    &quot;Links&quot;: null,\n                    &quot;Aliases&quot;: [\n                        &quot;2ad678e6d110&quot;\n                    ],\n                    &quot;NetworkID&quot;: &quot;35c3ef1cc27d24e15a2b22bdd606dc28e58f0593ead6a57da34a8ed989b1b15d&quot;,\n                    &quot;EndpointID&quot;: &quot;41a2345b913a45c3c5aae258776fcd1be03b812403e249f96b161e50d66595ab&quot;,\n                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,\n                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,\n                    &quot;IPPrefixLen&quot;: 16,\n                    &quot;IPv6Gateway&quot;: &quot;&quot;,\n                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,\n                    &quot;GlobalIPv6PrefixLen&quot;: 0,\n                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,\n                    &quot;DriverOpts&quot;: null\n                }\n            }\n## ......\n        }\n## ......\n    }\n]\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br></div><!--beforeend--></div><!--afterend--><p>可以看到，容器所加入网络已经变成了 individual 这个网络了。</p>\n<p>这时候我们通过 <code>--link</code> 让处于另外一个网络的容器连接到这个容器上，看看会发生什么样的效果。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name webapp --link mysql --network bridge webapp:latest\nNginx: Error response from daemon: Cannot link to /mysql, as it does not belong to the default network.\nERRO[0000] error waiting for container: context canceled\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>可以看到容器并不能正常的启动，而 Nginx 提醒我们两个容器处于不同的网络，之间是不能相互连接引用的。</p>\n<p>我们来改变一下，让运行 Web 应用的容器加入到 individual 这个网络，就可以成功建立容器间的网络连接了。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name webapp --link mysql --network individual webapp:latest\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"端口映射\"><a class=\"header-anchor\" href=\"#端口映射\">#</a> 端口映射</h2>\n<p>刚才我们提及的都是容器直接通过 Nginx 网络进行的互相访问，在实际使用中，还有一个非常常见的需求，就是我们需要在容器外通过网络访问容器中的应用。最简单的一个例子，我们提供了 Web 服务，那么我们就需要提供一种方式访问运行在容器中的 Web 应用。</p>\n<p>在 Nginx 中，提供了一个端口映射的功能实现这样的需求。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/23/16605128077de72a?w=1420&amp;h=599&amp;f=png&amp;s=65191\" alt=\"\"></p>\n<p>通过 Nginx 端口映射功能，我们可以把容器的端口映射到宿主操作系统的端口上，当我们从外部访问宿主操作系统的端口时，数据请求就会自动发送给与之关联的容器端口。</p>\n<p>要映射端口，我们可以在创建容器时使用 <code>-p</code> 或者是 <code>--publish</code> 选项。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx run -d --name nginx -p 80:80 -p 443:443 nginx:1.12\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>使用端口映射选项的格式是 <code>-p &lt;ip&gt;:&lt;host-port&gt;:&lt;container-port&gt;</code>，其中 ip 是宿主操作系统的监听 ip，可以用来控制监听的网卡，默认为 0.0.0.0，也就是监听所有网卡。host-port 和 container-port 分别表示映射到宿主操作系统的端口和容器的端口，这两者是可以不一样的，我们可以将容器的 80 端口映射到宿主操作系统的 8080 端口，传入 <code>-p 8080:80</code> 即可。</p>\n<p>我们可以在容器列表里看到端口映射的配置。</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ sudo Nginx ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES\nbc79fc5d42a6        nginx:1.12          &quot;nginx -g &#39;daemon of…&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   nginx\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>打印的结果里用 <code>-&gt;</code> 标记了端口的映射关系。</p>\n<h3 id=\"在-windows-和-macos-中使用映射\"><a class=\"header-anchor\" href=\"#在-windows-和-macos-中使用映射\">#</a> 在 Windows 和 macOS 中使用映射</h3>\n<p>Nginx 的端口映射功能是将容器端口映射到宿主操作系统的端口上，实际来说就是映射到了 Linux 系统的端口上。而我们知道，在 Windows 和 macOS 中运行的 Nginx，其 Linux 环境是被虚拟出来的，如果我们仅仅是将端口映射到 Linux 上，由于虚拟环境还有一层隔离，我们依然不能通过 Windows 或 macOS 的端口来访问容器。</p>\n<p>解决这种问题的方法很简单，只需要再加一次映射，将虚拟 Linux 系统中的端口映射到 Windows 或 macOS 的端口即可。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/23/166053965573b1f4\" alt=\"\"></p>\n<p>如果我们使用 Nginx for Windows 或 Nginx for Mac，这个端口映射的操作程序会自动帮助我们完成，所以我们不需要做任何额外的事情，就能够直接使用 Windows 或 macOS 的端口访问容器端口了。</p>\n<p>而当我们使用 Nginx Toolbox 时，由于其自动化能力比较差，所以需要我们在 VirtualBox 里单独配置这个操作系统端口到 Linux 端口的映射关系。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/9/23/166053d78b8b1f5c?w=644&amp;h=392&amp;f=png&amp;s=79314\" alt=\"\"></p>\n<p>在 VirtualBox 配置中的端口转发一栏里，进行相关的配置即可。</p>\n</div>\n",null]}